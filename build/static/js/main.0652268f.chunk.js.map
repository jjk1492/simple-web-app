{"version":3,"sources":["scripts/conferneceInfo.jsx","scripts/registered.jsx","scripts/verifyRegistration.jsx","scripts/registerForm.jsx","scripts/home.jsx","serviceWorker.js","index.js"],"names":["ConferenceInfo","copyText","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","useEffect","$","tooltip","getElementById","addEventListener","event","text","preventDefault","attr","className","id","data-toggle","data-placement","data-html","title","onClick","tabIndex","SuccessfulRegister","getElementsByClassName","classList","add","style","maxWidth","React","Component","RegistrationVerification","values","this","props","remove","setTimeout","ReactDOM","render","sendForm","newApplicaant","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","status","console","log","send","JSON","stringify","firstName","lastName","email","address1","address2","city","state","zip","schoolCompany","paymentType","address","RegisterForm","animation","enter","exit","valid","handleSubmit","bind","handleChange","target","name","setState","field","contains","match","markValid","markInvalid","getElementsByTagName","noValidate","onSubmit","for","type","placeholder","onChange","required","disabled","IndexMarkup","showRegister","Boolean","window","location","hostname","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0652268f.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport $ from 'jquery';\nimport 'popper.js';\nimport 'bootstrap';\n\nconst ConferenceInfo = () => {\n\n    const conferenceAddress = '429 11th Ave, New York, NY 10001';\n\n    const updateTooltip = (text) => {\n        $('#address-info')\n            .attr('title', text)\n            .attr('data-original-title', text)\n            .tooltip('show');\n    }\n\n    /**\n     * Copies text using the document.execCommand method.\n     * \n     * execCommand('copy') copies the content of the currently selected element\n     * to the clipboard. Inorder to copy our text must create a textarea input\n     * and set its value to the desired value to be copied. Then select the element\n     * and run the execCommand. Remove the markup after copy.\n     */\n    const copyText = () => {\n        const el = document.createElement('textarea');\n        el.value = conferenceAddress;\n        document.body.appendChild(el);\n        el.select();\n        document.execCommand('copy');\n        document.body.removeChild(el);\n    }\n\n    useEffect(() => {\n        // Activate tooltips whenever this element is mounted\n        $(() => {\n            $('[data-toggle=\"tooltip\"]').tooltip();\n        });\n\n        // Add a click event listener to the conference locations name\n        // that copies the locations address to the clipboard and\n        // updates the tooltip to tell the user the string was copied.\n        const addressInfo = document.getElementById('address-info');\n        addressInfo.addEventListener('click', (event) => {\n            event.preventDefault();\n            copyText();\n            updateTooltip('Copied!');\n\n        });\n    }, []);\n\n    return (\n        <div className='info'>\n            <p className='thin-text'>Conference Info</p>\n            <div className='bold-text'>\n                April 18-22, 2020<br />\n                11 am - 3 pm<br />\n                <div id='address-info' data-toggle='tooltip' data-placement='left' data-html=\"true\" title='Click to copy<br/><b>429 11th Ave, New York, NY 10001</b>' onClick={copyText} tabIndex='0'>Jarvis Center</div>\n            </div>\n            <div className='sr-only'>{conferenceAddress}</div>\n        </div>\n    );\n}\n\nexport default ConferenceInfo;","import React from 'react';\nimport ConferenceInfo from './conferneceInfo';\n\n\nclass SuccessfulRegister extends React.Component {\n\n    componentDidMount() {\n        document.getElementsByClassName('content-container')[0].classList.add('appearing');\n    }\n\n    render() {\n        return (\n            <div className='content-container'>\n                <div className='d-flex flex-column' style={{ maxWidth: '540px' }}>\n                    <span className='h1 bold-text'>Status Code: 200</span>\n                    <span className='h3 thin-text'>Your ticket purchase for the 8<sup>th</sup> Annual Web Developer Conference was successful.</span>\n                </div>\n                <ConferenceInfo />\n            </div>\n        );\n    }\n}\n\nexport default SuccessfulRegister;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RegisterForm from './registerForm';\nimport SuccessfulRegister from './registered';\n\nclass RegistrationVerification extends React.Component {\n\n    componentDidMount() {\n        // Do a fancy enter animation\n        document.getElementsByClassName('content-container')[0].classList.add('slide-in-right');\n\n        const values = { ...this.props.values }\n        document.getElementById('makeChange').addEventListener('click', () => {\n\n            // Do a fancy exit animation\n            document.getElementsByClassName('content-container')[0].classList.remove('slide-in-right');\n            document.getElementsByClassName('content-container')[0].classList.add('slide-out-right');\n            setTimeout(() => {\n                ReactDOM.render(<RegisterForm values={values} />, document.getElementById('root'));\n            }, 600);\n        });\n\n        document.getElementById('verified').addEventListener('click', () => {\n            this.sendForm(values);\n            document.getElementById('background').classList.remove('form-active');\n\n            // Do a fancy exit animation\n            document.getElementsByClassName('content-container')[0].classList.remove('slide-in-right');\n            document.getElementsByClassName('content-container')[0].classList.add('slide-out-left');\n            setTimeout(() => {\n                ReactDOM.render(<SuccessfulRegister />, document.getElementById('root'));\n            }, 600);\n        })\n\n    }\n\n    sendForm(newApplicaant) {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('POST', '/users/register', true);\n        xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n        xhr.onreadystatechange = () => {\n            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {\n                console.log('Sent');\n            }\n        }\n\n        xhr.send(JSON.stringify(newApplicaant));\n    }\n\n    render() {\n\n        // Extract our form values from the prop into variables for easier access\n        const { firstName, lastName, email, address1, address2, city, state, zip, schoolCompany, status, paymentType } = this.props.values;\n\n        let address = '';\n        if (address2) {\n            address = (<p className='field-value text-capitalize'>\n                {address1}<br />\n                {address2}<br />\n                {city}, {state} {zip}\n            </p>);\n        } else {\n            address = (<p className='field-value text-capitalize'>\n                {address1}<br />\n                {city}, {state} {zip}\n            </p>);\n        }\n\n        return (\n            <div className='content-container d-inline-flex'>\n                <h1 className='thin-text mb-2'>Is everything correct?</h1>\n\n                <div className='d-flex flex-column verification-container'>\n\n                    <div className='field-collection'>\n                        <p className='field-label'>Full Name</p>\n                        <p className='field-value'>{firstName + ' ' + lastName}</p>\n                    </div>\n\n                    <div className='field-collection'>\n                        <p className='field-label'>Email Address</p>\n                        <p className='field-value'>{email}</p>\n                    </div>\n\n                    <div className='field-collection'>\n                        <p className='field-label'>Street Address</p>\n                        {address}\n                    </div>\n\n                    <div className='field-collection'>\n                        <p className='field-label'>School or Company</p>\n                        <p className='field-value'>{schoolCompany === '' ? 'N/A' : schoolCompany}</p>\n                    </div>\n\n\n                    <div className='field-collection'>\n                        <p className='field-label'>Status</p>\n                        <p className='field-value'>{status}</p>\n                    </div>\n\n\n                    <div className='field-collection'>\n                        <p className='field-label'>Payment Type</p>\n                        <p className='field-value'>{paymentType}</p>\n                    </div>\n                </div>\n\n\n                <div className='d-flex w-100'>\n                    <button className='btn btn-secondary' id=\"makeChange\">Make a change</button>\n                    <button className='btn ml-auto' id='verified'>That's me</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default RegistrationVerification;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RegistrationVerification from './verifyRegistration';\n\n\nclass RegisterForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        if (props.values) {\n            this.state = props.values;\n            this.state.animation = {\n                enter: 'slide-in-left',\n                exit: 'slide-out-left'\n            };\n\n        }\n        else {\n            this.state = {\n                firstName: '',\n                lastName: '',\n                email: '',\n                address1: '',\n                address2: '',\n                city: '',\n                state: '',\n                zip: '',\n                schoolCompany: '',\n                status: '',\n                paymentType: '',\n                valid: true\n            };\n            this.state.animation = {\n                enter: 'slide-in-right',\n                exit: 'slide-out-left'\n            };\n        }\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.id;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    markValid(field) {\n        if (field.classList.contains('invalid')) {\n            field.classList.remove('invalid')\n        }\n        field.classList.add('valid');\n    }\n\n    markInvalid(field) {\n\n        if (field.classList.contains('valid')) {\n            field.classList.remove('valid')\n        }\n        field.classList.add('invalid');\n\n        return false;\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        let valid = true\n\n        // Validation Regex\n        const firstNameValidation = /^[a-zA-Z][^ #&<>\"~;$^%{}?0-9]{1,20}$/;\n        const lastNameValidation = /^[a-zA-Z][^#&<>\"~;$^%{}?]{1,20}$/;\n        const emailVerification = /^[^@]+@[^.]+\\..+$/;\n        const addressVerification = /^^\\d+\\s[A-z]+\\s[A-z]+\\s*[A-z]*$/;\n        const cityVerification = /^[a-zA-Z]+(?:[\\s-][a-zA-Z]+)*$/;\n        const zipVerificatiom = /^[0-9]{5}$/;\n\n        // form elements for verification and applying styles\n        const firstName = document.getElementById('firstName');\n        const lastName = document.getElementById('lastName');\n        const email = document.getElementById('email');\n        const address1 = document.getElementById('address1');\n        const address2 = document.getElementById('address2');\n        const city = document.getElementById('city');\n        const state = document.getElementById('state');\n        const zip = document.getElementById('zip');\n        const schoolCompany = document.getElementById('schoolCompany');\n        const status = document.getElementById('status');\n        const paymentType = document.getElementById('paymentType');\n\n\n\n        // Match each value with its validation string. if value is valid, the field gets the valid class, else it gets the invalid class.\n        (firstName.value.match(firstNameValidation) !== null) ? this.markValid(firstName) : valid = this.markInvalid(firstName);\n        (lastName.value.match(lastNameValidation) !== null) ? this.markValid(lastName) : valid = this.markInvalid(lastName);\n        (email.value.match(emailVerification) !== null) ? this.markValid(email) : valid = this.markInvalid(email);\n        (address1.value.match(addressVerification) !== null) ? this.markValid(address1) : valid = this.markInvalid(address1);\n        (city.value.match(cityVerification) !== null) ? this.markValid(city) : valid = this.markInvalid(city);\n        (zip.value.match(zipVerificatiom) !== null) ? this.markValid(zip) : valid = this.markInvalid(zip);\n\n        // The drop downs just need to be checked for a non-empty value\n        (state.value !== '') ? this.markValid(state) : valid = this.markInvalid(state);\n        (status.value !== '') ? this.markValid(status) : valid = this.markInvalid(status);\n        (paymentType.value !== '') ? this.markValid(paymentType) : valid = this.markInvalid(paymentType);\n\n        // These fields are not required so they're always valid\n        this.markValid(schoolCompany);\n        this.markValid(address2);\n\n        if (valid) {\n            const values = {\n                firstName: firstName.value,\n                lastName: lastName.value,\n                email: email.value,\n                address1: address1.value,\n                address2: address2.value,\n                city: city.value,\n                state: state.value,\n                zip: zip.value,\n                schoolCompany: schoolCompany.value,\n                status: status.value,\n                paymentType: paymentType.value\n            }\n\n\n            // Janky way of allowing my exit animation to run before the component dismounts and is \n            // removed from the DOM.\n            document.getElementsByTagName('form')[0].classList.add(this.state.animation.exit);\n            setTimeout(() => {\n                ReactDOM.render(<RegistrationVerification values={values} />, document.getElementById('root'));\n            }, 600);\n\n        } else {\n            valid = true;\n        }\n\n\n    }\n\n    // Handle the loading animations\n    componentDidMount() {\n        document.getElementsByTagName('form')[0].classList.add(this.state.animation.enter);\n        setTimeout(() => {\n            document.getElementsByTagName('form')[0].classList.remove(this.state.animation.enter);\n            document.getElementsByTagName('form')[0].classList.add('arrived');\n        }, 600)\n    }\n\n    render() {\n        return (\n            <div className='content-container d-inline-flex'>\n\n                <form className='needs-validation' noValidate={true} onSubmit={this.handleSubmit}>\n                    <h1 className='thin-text'>Tell us about yourself</h1>\n\n                    <div className='form-row'>\n                        <div className='col-12 col-md-6'>\n                            <div className='form-group'>\n                                <label for='firstName'>First Name</label>\n                                <input type='text' id='firstName' className='form-control' placeholder='First Name*' onChange={this.handleChange} value={this.state.firstName} required={true} />\n\n                            </div>\n                        </div>\n                        <div className='col-12 col-md-6'>\n                            <div className='form-group'>\n                                <label for='lastName'>Last Name</label>\n                                <input type='text' id='lastName' className='form-control' placeholder='Last Name*' onChange={this.handleChange} value={this.state.lastName} required={true} />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className='form-group'>\n                        <label for='email'>Email</label>\n                        <input type='email' id='email' className='form-control' placeholder='Email Address*' onChange={this.handleChange} value={this.state.email} required={true} />\n                    </div>\n\n                    <div className='form-group'>\n                        <label for='address1'>Street Address 1</label>\n                        <input type='text' id='address1' className='form-control' placeholder='Address Line 1*' onChange={this.handleChange} value={this.state.address1} required={true} />\n                    </div>\n\n                    <div className='form-group'>\n                        <label for='address2'>Street Address 2</label>\n                        <input type='text' id='address2' className='form-control' placeholder='Address Line 2' onChange={this.handleChange} value={this.state.address2} />\n                    </div>\n\n                    <div className='form-row'>\n                        <div className='form-group col-12 col-md-6'>\n                            <label for='city'>City</label>\n                            <input type='text' id='city' className='form-control' placeholder='City*' onChange={this.handleChange} value={this.state.city} required={true} />\n                        </div>\n\n\n\n                        <div className='form-group col-6 col-md-3'>\n                            <label for='state'>State</label>\n                            <select id='state' className='custom-select' value={this.state.state} onChange={this.handleChange} required>\n                                <option disabled value=''>State*</option>\n                                <option>AL</option>\n                                <option>AK</option>\n                                <option>AZ</option>\n                                <option>AR</option>\n                                <option>CA</option>\n                                <option>CO</option>\n                                <option>CT</option>\n                                <option>DE</option>\n                                <option>FL</option>\n                                <option>GA</option>\n                                <option>HI</option>\n                                <option>ID</option>\n                                <option>IL</option>\n                                <option>IN</option>\n                                <option>IA</option>\n                                <option>KS</option>\n                                <option>KY</option>\n                                <option>LA</option>\n                                <option>ME</option>\n                                <option>MD</option>\n                                <option>MA</option>\n                                <option>MI</option>\n                                <option>MN</option>\n                                <option>MS</option>\n                                <option>MO</option>\n                                <option>MT</option>\n                                <option>NE</option>\n                                <option>NV</option>\n                                <option>NH</option>\n                                <option>NJ</option>\n                                <option>NM</option>\n                                <option>NY</option>\n                                <option>NC</option>\n                                <option>ND</option>\n                                <option>OH</option>\n                                <option>OK</option>\n                                <option>OR</option>\n                                <option>PA</option>\n                                <option>RI</option>\n                                <option>SC</option>\n                                <option>SD</option>\n                                <option>TN</option>\n                                <option>TX</option>\n                                <option>UT</option>\n                                <option>VT</option>\n                                <option>VA</option>\n                                <option>WA</option>\n                                <option>WV</option>\n                                <option>WI</option>\n                                <option>WY</option>\n                            </select>\n                        </div>\n\n                        <div className='form-group col-6 col-md-3'>\n                            <label for='zip'>Zip</label>\n                            <input type='text' id='zip' className='form-control' placeholder='Zip Code*' onChange={this.handleChange} value={this.state.zip} required={true} />\n                        </div>\n                    </div>\n\n                    <div className='form-group'>\n                        <label for='schoolCompany'>School or Company</label>\n                        <input type='text' id='schoolCompany' className='form-control' placeholder='School or Company' onChange={this.handleChange} value={this.state.schoolCompany} />\n                    </div>\n\n\n                    <div className='form-group'>\n                        <label for='status'>Status</label>\n                        <select id='status' name='status' className='custom-select' value={this.state.status} onChange={this.handleChange} required>\n                            <option disabled value=''>Status*</option>\n                            <option>Undergraduate Student</option>\n                            <option>Graduate Student</option>\n                            <option>Professor</option>\n                            <option>Industry Employee</option>\n                        </select>\n                    </div>\n\n                    <div className='form-group'>\n                        <label for='paymentType'>Payment Type</label>\n                        <select id='paymentType' name='paymentType' className='custom-select' value={this.state.paymentType} onChange={this.handleChange} required>\n                            <option disabled value=''>Payment Type*</option>\n                            <option>Visa</option>\n                            <option>Mastercard</option>\n                            <option>American Express</option>\n                            <option>Discover</option>\n                        </select>\n                    </div>\n                    <div className='d-flex'>\n                        <button type='submit' className='btn ml-auto'>Continue</button>\n                    </div>\n\n\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default RegisterForm;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RegisterForm from './registerForm';\nimport ConferenceInfo from './conferneceInfo';\nimport '../styles/scss/styles.scss';\n\nclass IndexMarkup extends React.Component {\n\n    showRegister() {\n        document.getElementById('background').classList.add('form-active');\n\n\n        document.getElementsByClassName('content-container')[0].classList.remove('appearing');\n        document.getElementsByClassName('content-container')[0].classList.add('disappearing');\n        setTimeout(() => {\n            ReactDOM.render(<RegisterForm />, document.getElementById('root'));\n        }, 400);\n    }\n\n    componentDidMount() {\n        document.getElementsByClassName('content-container')[0].classList.add('appearing');\n    }\n\n    render() {\n        return (\n            <div className='content-container'>\n                <div>\n                    <span className='h1 thin-text'>8<sup>th</sup> Annual</span>\n                    <h1 className='bold-text'>Web Developer Conference</h1>\n                </div>\n                <ConferenceInfo />\n                <div className='cta'>\n                    <button className='btn btn-xl' onClick={this.showRegister}>Get my tickets</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default IndexMarkup;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport IndexMarkup from './scripts/home.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<IndexMarkup />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}